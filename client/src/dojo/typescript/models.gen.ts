// Generated by dojo-bindgen on Mon, 26 Aug 2024 15:13:33 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript`
import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<
  ReturnType<typeof defineContractComponents>
>;

// Type definition for `dojo::model::layout::Layout` enum
export type Layout =
  | { type: "Fixed"; value: RecsType.NumberArray }
  | { type: "Struct"; value: RecsType.StringArray }
  | { type: "Tuple"; value: RecsType.StringArray }
  | { type: "Array"; value: RecsType.StringArray }
  | { type: "ByteArray" }
  | { type: "Enum"; value: RecsType.StringArray };

export const LayoutDefinition = {
  type: RecsType.String,
  value: RecsType.String,
};

// Type definition for `tonatuna::models::index::Player` struct
export interface Player {
  id: bigint;
  name: bigint;
  bait_balance: number;
  fish_caught: number;
  daily_attempts: number;
}
export const PlayerDefinition = {
  id: RecsType.BigInt,
  name: RecsType.BigInt,
  bait_balance: RecsType.Number,
  fish_caught: RecsType.Number,
  daily_attempts: RecsType.Number,
};

// Type definition for `dojo::model::layout::FieldLayout` struct
export interface FieldLayout {
  selector: bigint;
  layout: Layout;
}
export const FieldLayoutDefinition = {
  selector: RecsType.BigInt,
  layout: LayoutDefinition,
};

// Type definition for `core::byte_array::ByteArray` struct
export interface ByteArray {
  data: string[];
  pending_word: bigint;
  pending_word_len: number;
}
export const ByteArrayDefinition = {
  data: RecsType.StringArray,
  pending_word: RecsType.BigInt,
  pending_word_len: RecsType.Number,
};

// Type definition for `tonatuna::models::index::FishPond` struct
export interface FishPond {
  id: number;
  fish_population: number;
  daily_catch_limit: number;
  rare_fish_chance: number;
  daily_catches: number;
}
export const FishPondDefinition = {
  id: RecsType.Number,
  fish_population: RecsType.Number,
  daily_catch_limit: RecsType.Number,
  rare_fish_chance: RecsType.Number,
  daily_catches: RecsType.Number,
};

export function defineContractComponents(world: World) {
  return {
    // Model definition for `tonatuna::models::index::Player` model
    Player: (() => {
      return defineComponent(
        world,
        {
          id: RecsType.BigInt,
          name: RecsType.BigInt,
          bait_balance: RecsType.Number,
          fish_caught: RecsType.Number,
          daily_attempts: RecsType.Number,
        },
        {
          metadata: {
            namespace: "tonatuna",
            name: "Player",
            types: ["felt252", "felt252", "u32", "u32", "u8"],
            customTypes: [],
          },
        },
      );
    })(),

    // Model definition for `tonatuna::models::index::FishPond` model
    FishPond: (() => {
      return defineComponent(
        world,
        {
          id: RecsType.Number,
          fish_population: RecsType.Number,
          daily_catch_limit: RecsType.Number,
          rare_fish_chance: RecsType.Number,
          daily_catches: RecsType.Number,
        },
        {
          metadata: {
            namespace: "tonatuna",
            name: "FishPond",
            types: ["u32", "u32", "u32", "u8", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
  };
}
